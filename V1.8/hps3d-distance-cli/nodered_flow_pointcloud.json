[
    {
        "id": "pointcloud_flow",
        "type": "tab",
        "label": "HPS3D Pointcloud",
        "disabled": false,
        "info": "Punktwolken-Visualisierung für HPS3D-160 LIDAR"
    },
    {
        "id": "g-pointcloud",
        "type": "ui_group",
        "name": "Punktwolke",
        "tab": "t-pointcloud",
        "order": 1,
        "disp": true,
        "width": "24",
        "collapse": false
    },
    {
        "id": "t-pointcloud",
        "type": "ui_tab",
        "name": "LIDAR Punktwolke",
        "icon": "fa-cube",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "trigger_pointcloud",
        "type": "ui_button",
        "z": "pointcloud_flow",
        "name": "Capture Pointcloud",
        "group": "g-pointcloud",
        "order": 1,
        "width": 4,
        "height": 1,
        "passthru": false,
        "label": "Punktwolke aufnehmen",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "fa-camera",
        "payload": "get_pointcloud",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 160,
        "y": 120,
        "wires": [["mqtt_trigger"]]
    },
    {
        "id": "mqtt_trigger",
        "type": "mqtt out",
        "z": "pointcloud_flow",
        "name": "Request Pointcloud",
        "topic": "hps3d/control",
        "qos": "0",
        "retain": "false",
        "respTopic": "",
        "contentType": "",
        "userProps": "",
        "correl": "",
        "expiry": "",
        "broker": "mqtt_broker",
        "x": 380,
        "y": 120,
        "wires": []
    },
    {
        "id": "mqtt_pointcloud",
        "type": "mqtt in",
        "z": "pointcloud_flow",
        "name": "Receive Pointcloud",
        "topic": "hps3d/pointcloud",
        "qos": "0",
        "datatype": "json",
        "broker": "mqtt_broker",
        "nl": false,
        "rap": true,
        "x": 160,
        "y": 180,
        "wires": [["process_pointcloud"]]
    },
    {
        "id": "process_pointcloud",
        "type": "function",
        "z": "pointcloud_flow",
        "name": "Convert to Scatter",
        "func": "// Debug: Log eingehende Daten\nnode.warn(\"Received data: \" + JSON.stringify(msg.payload));\n\n// Prüfe ob Daten vorhanden sind\nif (!msg.payload || !msg.payload.data || !Array.isArray(msg.payload.data)) {\n    node.error(\"Keine gültigen Punktwolken-Daten empfangen\");\n    return null;\n}\n\n// Extrahiere die Punktwolken-Daten\nconst points = msg.payload.data;\n\n// Erstelle Arrays für die Scatter-Plot Daten\nconst x = [];\nconst y = [];\nconst z = [];\nconst colors = [];\n\n// Verarbeite jeden Punkt\npoints.forEach(point => {\n    // Nur gültige Punkte hinzufügen\n    if (point.d > 0 && point.d < 65000) {\n        // X und Y sind die Sensorkoordinaten (0-160, 0-60)\n        x.push(point.x);\n        y.push(point.y);\n        // Z ist die gemessene Distanz in mm\n        z.push(point.d);\n        \n        // Farbberechnung basierend auf Distanz\n        const normalizedDist = Math.min(point.d / 1600, 1);\n        let color;\n        if (normalizedDist < 0.5) {\n            // Blau zu Grün\n            const t = normalizedDist * 2;\n            color = `rgb(0,${Math.floor(255*t)},${Math.floor(255*(1-t))})`;\n        } else {\n            // Grün zu Rot\n            const t = (normalizedDist - 0.5) * 2;\n            color = `rgb(${Math.floor(255*t)},${Math.floor(255*(1-t))},0)`;\n        }\n        colors.push(color);\n    }\n});\n\n// Erstelle die Plotly-Daten\nconst plotData = {\n    payload: [{\n        type: 'scatter3d',\n        mode: 'markers',\n        x: x,\n        y: y,\n        z: z,\n        marker: {\n            size: 3,\n            color: colors,\n            opacity: 0.8\n        },\n        name: 'Punktwolke'\n    }],\n    layout: {\n        title: 'HPS3D-160 Punktwolke',\n        paper_bgcolor: 'white',\n        plot_bgcolor: 'white',\n        scene: {\n            camera: {\n                eye: {x: 1.5, y: 1.5, z: 1.5}\n            },\n            xaxis: {\n                title: 'X (Pixel)',\n                range: [0, 160]\n            },\n            yaxis: {\n                title: 'Y (Pixel)',\n                range: [0, 60]\n            },\n            zaxis: {\n                title: 'Distanz (mm)',\n                range: [0, 1600]\n            },\n            aspectmode: 'manual',\n            aspectratio: {x: 2, y: 1, z: 1.5}\n        }\n    }\n};\n\nreturn plotData;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 380,
        "y": 180,
        "wires": [["plotly", "debug"]]
    },
    {
        "id": "plotly",
        "type": "ui_plotly",
        "z": "pointcloud_flow",
        "group": "g-pointcloud",
        "order": 2,
        "width": "24",
        "height": "12",
        "name": "3D Visualization",
        "x": 580,
        "y": 180,
        "wires": [[]]
    },
    {
        "id": "debug",
        "type": "debug",
        "z": "pointcloud_flow",
        "name": "Debug",
        "active": true,
        "tosidebar": true,
        "console": true,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 580,
        "y": 240,
        "wires": []
    }
] 