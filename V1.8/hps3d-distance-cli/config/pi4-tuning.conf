# Raspberry Pi 4 Tuning Configuration for HPS3D LIDAR Service
# This file contains Pi4-specific optimizations and tuning parameters

# =============================================================================
# ARM Cortex-A72 CPU Optimizations
# =============================================================================

# CPU Governor (ondemand provides best balance of performance and power)
cpu_governor=ondemand

# CPU Frequency Scaling (Pi4 can scale from 600MHz to 1.5GHz)
cpu_min_freq=800000    # 800MHz minimum for stable LIDAR operation
cpu_max_freq=1500000   # 1.5GHz maximum (Pi4 stock)

# CPU Affinity Settings (distribute threads across cores)
measure_thread_cpu=0   # Core 0: Dedicated to LIDAR measurements
output_thread_cpu=1    # Core 1: JSON output and formatting
http_thread_cpu=2      # Core 2: HTTP server requests
mqtt_thread_cpu=3      # Core 3: MQTT communication

# =============================================================================
# Memory Management Optimizations
# =============================================================================

# Memory pool sizes (optimized for Pi4's larger RAM)
point_cloud_pool_mb=8      # 8MB pool for point cloud data
measurement_cache_mb=2     # 2MB cache for measurements
thread_stack_size_kb=1024  # 1MB stack per thread

# Memory alignment (64-byte alignment for Cortex-A72 cache)
memory_alignment=64

# NUMA awareness (Pi4 has unified memory architecture)
numa_policy=interleave

# =============================================================================
# USB 3.0 Performance Tuning
# =============================================================================

# USB buffer sizes (Pi4 USB 3.0 can handle larger buffers)
usb3_buffer_size_kb=64     # 64KB buffer for USB 3.0 transfers
usb3_timeout_ms=50         # Reduced timeout for faster response
usb3_retry_count=5         # Increased retries for reliability

# USB power management
usb_autosuspend_delay=2000 # 2 second delay before suspend
usb_selective_suspend=1    # Enable selective suspend

# HPS3D specific USB settings
hps3d_usb_interface_alt=0  # Use alternate interface 0
hps3d_bulk_timeout=100     # 100ms bulk transfer timeout

# =============================================================================
# GPIO Configuration
# =============================================================================

# Status LED pins (using PWM-capable pins)
status_led_pin=18          # PWM0 - System status (green)
error_led_pin=19           # PWM1 - Error indicator (red)
lidar_power_pin=20         # Power control for LIDAR
system_health_pin=21       # System health monitoring

# GPIO drive strength (Pi4 supports higher drive)
gpio_drive_strength=8      # 8mA drive strength

# =============================================================================
# Network Performance Optimizations
# =============================================================================

# Ethernet settings (Pi4 has true Gigabit Ethernet)
eth_speed=1000             # 1000 Mbit/s
eth_duplex=full            # Full duplex
eth_autoneg=on             # Auto-negotiation enabled

# TCP buffer sizes (optimized for Pi4's memory)
tcp_rmem_max=134217728     # 128MB receive buffer
tcp_wmem_max=134217728     # 128MB send buffer
tcp_congestion_control=bbr # BBR congestion control

# =============================================================================
# MQTT Broker Optimization
# =============================================================================

# Mosquitto settings for Pi4
mqtt_max_connections=1000          # Increased connection limit
mqtt_max_queued_messages=10000     # Larger message queue
mqtt_message_size_limit=1048576    # 1MB message size limit
mqtt_memory_limit=512              # 512MB memory limit
mqtt_persistence=true              # Enable persistence
mqtt_persistence_location=/var/lib/mosquitto/

# =============================================================================
# Power Management
# =============================================================================

# Pi4 power management features
power_management_enabled=1     # Enable power management
thermal_throttling=1           # Enable thermal throttling
cpu_idle_states=1              # Enable CPU idle states

# Power thresholds
cpu_temp_warning=70           # Warn at 70°C
cpu_temp_critical=80          # Critical at 80°C
power_save_temp=65            # Enter power save at 65°C

# GPU memory split (minimal for headless operation)
gpu_memory_split=16           # 16MB for GPU (minimal)

# =============================================================================
# I/O Scheduler Optimization
# =============================================================================

# Storage scheduler (deadline is best for SD cards)
storage_scheduler=deadline    # Deadline scheduler for SD card
storage_read_ahead_kb=1024   # 1MB read-ahead buffer
storage_queue_depth=32       # Optimal queue depth for SD

# =============================================================================
# Real-time Process Priorities
# =============================================================================

# Process scheduling priorities (FIFO real-time)
measure_thread_priority=80   # Highest priority for measurements
output_thread_priority=70    # High priority for output
http_thread_priority=50      # Medium priority for HTTP
mqtt_thread_priority=60      # High priority for MQTT

# Nice values for non-critical processes
log_process_nice=10          # Lower priority for logging
maintenance_nice=15          # Lowest priority for maintenance

# =============================================================================
# Thermal Management
# =============================================================================

# Temperature monitoring intervals
temp_check_interval=5        # Check temperature every 5 seconds
temp_history_size=100        # Keep 100 temperature readings

# Thermal response actions
thermal_throttle_temp=75     # Start throttling at 75°C
thermal_shutdown_temp=85     # Emergency shutdown at 85°C

# Cooling configuration
fan_control_enabled=0        # Disable fan control (passive cooling)
heatsink_required=1          # Heatsink is required

# =============================================================================
# System Monitoring
# =============================================================================

# Performance monitoring
monitor_cpu_usage=1          # Monitor CPU usage
monitor_memory_usage=1       # Monitor memory usage
monitor_network_usage=1      # Monitor network usage
monitor_usb_performance=1    # Monitor USB performance

# Logging configuration
performance_log_interval=60  # Log performance every 60 seconds
error_log_retention_days=7   # Keep error logs for 7 days
debug_log_max_size_mb=100    # Limit debug logs to 100MB

# =============================================================================
# Application-Specific Tuning
# =============================================================================

# HPS3D measurement parameters
measurement_interval_ms=1500    # 1.5 second measurement interval
output_interval_ms=2000         # 2 second output interval
min_valid_pixels=6              # Minimum valid pixels (25% of 5x5 area)

# Point cloud optimization
pointcloud_compression=1        # Enable point cloud compression
pointcloud_filter_invalid=1     # Filter invalid points
pointcloud_batch_size=1000      # Process 1000 points per batch

# JSON output optimization
json_pretty_print=0             # Disable pretty printing for performance
json_escape_unicode=0           # Don't escape unicode characters
json_buffer_size_kb=4           # 4KB JSON buffer

# =============================================================================
# Security and Reliability
# =============================================================================

# Watchdog configuration
watchdog_enabled=1              # Enable hardware watchdog
watchdog_timeout_sec=30         # 30 second watchdog timeout

# Service restart policies
max_restart_attempts=5          # Maximum restart attempts
restart_delay_sec=5             # 5 second delay between restarts
restart_exponential_backoff=1   # Use exponential backoff

# Resource limits
max_memory_usage_mb=1024        # Limit memory to 1GB
max_cpu_usage_percent=80        # Limit CPU to 80%
max_file_descriptors=1024       # Limit file descriptors

# =============================================================================
# Development and Debug Settings
# =============================================================================

# Debug configuration (disable in production)
debug_enabled=1                 # Enable debug output
debug_level=2                   # Debug level (0=none, 3=verbose)
debug_usb_transfers=0           # Don't debug USB transfers (noisy)
debug_memory_allocation=0       # Don't debug memory allocation

# Profiling (disable in production)
profiling_enabled=0             # Disable profiling
cpu_profiling=0                 # Disable CPU profiling
memory_profiling=0              # Disable memory profiling

# =============================================================================
# Hardware-Specific Workarounds
# =============================================================================

# Pi4 USB 3.0 quirks
usb3_power_quirk=1              # Enable USB 3.0 power quirk
usb3_enumeration_delay=100      # 100ms enumeration delay

# WiFi interference mitigation (USB 3.0 can interfere with 2.4GHz)
wifi_avoid_2_4ghz=1             # Prefer 5GHz WiFi when available
usb3_spread_spectrum=1          # Enable spread spectrum to reduce interference

# HDMI optimization (disable if headless)
hdmi_force_hotplug=0            # Don't force HDMI hotplug
hdmi_ignore_edid=1              # Ignore EDID for headless operation

# =============================================================================
# End of Configuration
# =============================================================================